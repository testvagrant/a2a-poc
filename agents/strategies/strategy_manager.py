"""
Strategy Manager - Two-Tier Strategy Architecture

This manager handles:
1. Universal Strategies (domain-agnostic, auto-generated from API)
2. Domain-Specific Strategies (pre-built for specific domains)
"""

import json
import time
from typing import Dict, Any, Optional, List, Tuple
from .base_strategy import BaseStrategy
from .universal_strategy import UniversalStrategy
from .dynamic_financial_strategy import DynamicFinancialStrategy
from .dynamic_customer_service_strategy import DynamicCustomerServiceStrategy
from .dynamic_ai_strategy import DynamicAIStrategy

class StrategyManager:
    """
    Two-tier strategy manager for universal and domain-specific testing.
    
    Tier 1: Universal Strategies (domain-agnostic)
    - Auto-generated by analyzing Agent API
    - Tests fundamental AI capabilities
    - Applies to ALL agents regardless of domain
    
    Tier 2: Domain-Specific Strategies
    - Pre-built for specific domains
    - Tests domain expertise and knowledge
    - Customized for Finance, Customer Support, etc.
    """
    
    def __init__(self, llm_config: Dict[str, Any] = None):
        self.llm_config = llm_config or {
            'model': 'gpt-4o-mini',
            'temperature': 0.7,
            'max_tokens': 500
        }
        
        # Universal strategies (auto-generated)
        self.universal_strategies = {}
        
        # Domain-specific strategies (pre-built)
        self.domain_strategies = {
            'financial': DynamicFinancialStrategy,
            'customer_service': DynamicCustomerServiceStrategy,
            'support': DynamicCustomerServiceStrategy,  # Alias
            'generic': DynamicAIStrategy
        }
        
        # Domain detection keywords
        self.domain_keywords = {
            'financial': [
                'account', 'balance', 'payment', 'transaction', 'bank', 'loan',
                'credit', 'debit', 'transfer', 'deposit', 'withdrawal', 'interest',
                'mortgage', 'investment', 'portfolio', 'financial', 'money'
            ],
            'customer_service': [
                'support', 'help', 'issue', 'problem', 'trouble', 'assistance',
                'service', 'complaint', 'escalate', 'manager', 'technical',
                'billing', 'account', 'login', 'password', 'access'
            ]
        }
        
    def analyze_agent_api(self, agent_url: str, api_key: str = None) -> Dict[str, Any]:
        """
        Analyze Agent API to generate universal test strategies.
        
        Args:
            agent_url: URL of the agent API
            api_key: API key for authentication
            
        Returns:
            Analysis results for generating universal strategies
        """
        print(f"🔍 Analyzing Agent API: {agent_url}")
        
        # Simulate API analysis (in real implementation, this would call the API)
        api_analysis = {
            'endpoints': ['/chat', '/health', '/capabilities'],
            'supported_formats': ['json', 'text'],
            'authentication': 'bearer_token',
            'rate_limits': {'requests_per_minute': 60},
            'response_patterns': {
                'average_response_time': 1200,
                'typical_response_length': 150,
                'supports_streaming': False
            },
            'capabilities': [
                'conversation',
                'intent_recognition',
                'context_awareness',
                'error_handling'
            ],
            'domain_hints': self._extract_domain_hints_from_api(agent_url)
        }
        
        print(f"✅ API Analysis Complete: {len(api_analysis['capabilities'])} capabilities detected")
        return api_analysis
        
    def generate_universal_strategy(self, agent_url: str, api_analysis: Dict[str, Any]) -> UniversalStrategy:
        """
        Generate universal strategy based on API analysis.
        
        Args:
            agent_url: URL of the agent
            api_analysis: Results from API analysis
            
        Returns:
            Generated universal strategy
        """
        print(f"🎯 Generating Universal Strategy for: {agent_url}")
        
        # Create universal strategy with API analysis
        strategy = UniversalStrategy(api_analysis)
        strategy.name = f"Universal_{agent_url.split('//')[-1].split('.')[0]}"
        
        # Store for reuse
        self.universal_strategies[agent_url] = strategy
        
        print(f"✅ Universal Strategy Generated: {strategy.name}")
        return strategy
        
    def get_domain_strategy(self, domain: str) -> BaseStrategy:
        """
        Get domain-specific strategy for a given domain.
        
        Args:
            domain: Domain name (financial, customer_service, etc.)
            
        Returns:
            Domain-specific strategy
        """
        strategy_class = self.domain_strategies.get(domain, DynamicAIStrategy)
        return strategy_class(self.llm_config)
        
    def detect_domain(self, scenario: Dict[str, Any], agent_url: str = None) -> str:
        """
        Detect the appropriate domain for a scenario.
        
        Args:
            scenario: Scenario configuration
            agent_url: Optional agent URL for additional context
            
        Returns:
            Detected domain name
        """
        user_goal = scenario.get('goal', {}).get('user_goal', '').lower()
        scenario_title = scenario.get('title', '').lower()
        tags = scenario.get('tags', [])
        initial_msg = scenario.get('conversation', {}).get('initial_user_msg', '').lower()
        
        # Score each domain
        domain_scores = {}
        for domain, keywords in self.domain_keywords.items():
            score = 0
            for keyword in keywords:
                if keyword in user_goal:
                    score += 3
                if keyword in scenario_title:
                    score += 2
                if keyword in initial_msg:
                    score += 1
                if keyword in ' '.join(tags).lower():
                    score += 2
            domain_scores[domain] = score
            
        # Return domain with highest score, or 'generic' if no clear winner
        if domain_scores and max(domain_scores.values()) > 0:
            return max(domain_scores, key=domain_scores.get)
        return 'generic'
        
    def create_test_plan(self, agent_url: str, scenario: Dict[str, Any], 
                        api_analysis: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Create a comprehensive test plan with both universal and domain-specific strategies.
        
        Args:
            agent_url: URL of the agent to test
            scenario: Scenario configuration
            api_analysis: Optional pre-computed API analysis
            
        Returns:
            Complete test plan with strategies and execution order
        """
        print(f"📋 Creating Test Plan for: {agent_url}")
        
        # Analyze API if not provided
        if not api_analysis:
            api_analysis = self.analyze_agent_api(agent_url)
            
        # Generate universal strategy
        universal_strategy = self.generate_universal_strategy(agent_url, api_analysis)
        
        # Detect domain and get domain strategy
        domain = self.detect_domain(scenario, agent_url)
        domain_strategy = self.get_domain_strategy(domain)
        
        # Create test plan
        test_plan = {
            'agent_url': agent_url,
            'api_analysis': api_analysis,
            'detected_domain': domain,
            'universal_strategy': {
                'name': universal_strategy.name,
                'type': 'universal',
                'description': 'Tests fundamental AI capabilities',
                'capabilities': universal_strategy.get_strategy_info()['capabilities']
            },
            'domain_strategy': {
                'name': domain_strategy.name,
                'type': 'domain_specific',
                'domain': domain,
                'description': f'Tests {domain} domain expertise',
                'capabilities': domain_strategy.get_strategy_info()['capabilities']
            },
            'execution_order': [
                {'phase': 'universal', 'strategy': universal_strategy.name, 'priority': 1},
                {'phase': 'domain_specific', 'strategy': domain_strategy.name, 'priority': 2}
            ],
            'estimated_duration': self._estimate_test_duration(api_analysis, domain),
            'test_scenarios': self._generate_test_scenarios(universal_strategy, domain_strategy, scenario)
        }
        
        print(f"✅ Test Plan Created: {len(test_plan['test_scenarios'])} scenarios")
        return test_plan
        
    def _extract_domain_hints_from_api(self, agent_url: str) -> List[str]:
        """Extract domain hints from agent URL and API responses."""
        url_lower = agent_url.lower()
        hints = []
        
        if 'bank' in url_lower or 'financial' in url_lower:
            hints.append('financial')
        if 'support' in url_lower or 'help' in url_lower:
            hints.append('customer_service')
        if 'health' in url_lower or 'medical' in url_lower:
            hints.append('healthcare')
            
        return hints
        
    def _estimate_test_duration(self, api_analysis: Dict[str, Any], domain: str) -> Dict[str, Any]:
        """Estimate test duration based on API capabilities and domain complexity."""
        base_duration = 30  # seconds
        capability_multiplier = len(api_analysis.get('capabilities', [])) * 5
        domain_multiplier = 10 if domain != 'generic' else 5
        
        return {
            'universal_tests': base_duration + capability_multiplier,
            'domain_tests': base_duration + domain_multiplier,
            'total_estimated': base_duration + capability_multiplier + domain_multiplier
        }
        
    def _generate_test_scenarios(self, universal_strategy: UniversalStrategy, 
                                domain_strategy: BaseStrategy, scenario: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Generate test scenarios for both universal and domain strategies."""
        scenarios = []
        
        # Universal test scenarios
        universal_capabilities = universal_strategy.get_strategy_info()['capabilities']
        for i, capability in enumerate(universal_capabilities):
            scenarios.append({
                'id': f"UNIVERSAL_{capability.upper()}_{i+1}",
                'title': f"Universal Test: {capability.replace('_', ' ').title()}",
                'strategy': universal_strategy.name,
                'type': 'universal',
                'capability': capability,
                'priority': 1
            })
            
        # Domain-specific test scenarios
        domain_capabilities = domain_strategy.get_strategy_info()['capabilities']
        for i, capability in enumerate(domain_capabilities):
            scenarios.append({
                'id': f"DOMAIN_{capability.upper()}_{i+1}",
                'title': f"Domain Test: {capability.replace('_', ' ').title()}",
                'strategy': domain_strategy.name,
                'type': 'domain_specific',
                'capability': capability,
                'priority': 2
            })
            
        return scenarios
        
    def get_available_domains(self) -> List[str]:
        """Get list of available domain-specific strategies."""
        return list(self.domain_strategies.keys())
        
    def add_domain_strategy(self, domain: str, strategy_class: type, keywords: List[str] = None):
        """Add a new domain-specific strategy."""
        self.domain_strategies[domain] = strategy_class
        if keywords:
            self.domain_keywords[domain] = keywords
            
    def get_strategy_summary(self) -> Dict[str, Any]:
        """Get summary of all available strategies."""
        return {
            'universal_strategies': len(self.universal_strategies),
            'domain_strategies': len(self.domain_strategies),
            'available_domains': list(self.domain_strategies.keys()),
            'total_strategies': len(self.universal_strategies) + len(self.domain_strategies)
        }

# Example usage
if __name__ == "__main__":
    # Initialize strategy manager
    manager = StrategyManager()
    
    # Example scenario
    scenario = {
        'title': 'Account Balance Inquiry',
        'goal': {'user_goal': 'Check account balance and make payment'},
        'tags': ['financial', 'banking'],
        'conversation': {'initial_user_msg': 'I want to check my balance.'}
    }
    
    # Create test plan
    test_plan = manager.create_test_plan("https://api.bank.com/chat", scenario)
    
    print("Test Plan Summary:")
    print(f"  - Universal Strategy: {test_plan['universal_strategy']['name']}")
    print(f"  - Domain Strategy: {test_plan['domain_strategy']['name']}")
    print(f"  - Detected Domain: {test_plan['detected_domain']}")
    print(f"  - Test Scenarios: {len(test_plan['test_scenarios'])}")
    print(f"  - Estimated Duration: {test_plan['estimated_duration']['total_estimated']}s")
