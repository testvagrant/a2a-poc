#!/usr/bin/env python3
"""
Environment Setup Script for UTA

This script helps users set up their .env file for UTA testing with real LLM judges.
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create .env file with user input."""
    print("üîß UTA Environment Setup")
    print("=" * 50)
    print("This script will help you create a .env file for UTA testing.")
    print("You'll need API keys for the services you want to use.")
    print()
    
    # Check if .env already exists
    env_file = Path(".env")
    if env_file.exists():
        response = input("‚ö†Ô∏è .env file already exists. Overwrite? (y/N): ").strip().lower()
        if response != 'y':
            print("‚ùå Setup cancelled.")
            return False
    
    # Collect configuration
    config = {}
    
    print("üìã OpenAI Configuration (Required for ChatGPT testing)")
    print("-" * 50)
    openai_key = input("Enter your OpenAI API key: ").strip()
    if openai_key:
        config["OPENAI_API_KEY"] = openai_key
        config["OPENAI_MODEL"] = input("OpenAI model (default: gpt-3.5-turbo): ").strip() or "gpt-3.5-turbo"
        config["OPENAI_BASE_URL"] = "https://api.openai.com/v1/chat/completions"
    
    print("\nü§ñ LLM Judge Configuration (Required for LLM judging)")
    print("-" * 50)
    llm_judge_key = input("Enter LLM Judge API key (can be same as OpenAI): ").strip()
    if llm_judge_key:
        config["LLM_JUDGE_API_KEY"] = llm_judge_key
        config["LLM_JUDGE_MODEL"] = input("LLM Judge model (default: gpt-4): ").strip() or "gpt-4"
        config["LLM_JUDGE_TYPE"] = "openai"
        config["LLM_JUDGE_TEMPERATURE"] = "0.1"
        config["LLM_JUDGE_MAX_TOKENS"] = "1000"
    
    print("\nüîß UTA Configuration")
    print("-" * 50)
    config["UTA_LOG_LEVEL"] = input("Log level (default: INFO): ").strip() or "INFO"
    config["UTA_REPORT_DIR"] = input("Report directory (default: reports): ").strip() or "reports"
    config["UTA_SEED"] = input("Default seed (default: 42): ").strip() or "42"
    
    print("\nüåê HTTP Configuration")
    print("-" * 50)
    config["HTTP_TIMEOUT"] = input("HTTP timeout (default: 60): ").strip() or "60"
    config["HTTP_RETRIES"] = input("HTTP retries (default: 3): ").strip() or "3"
    config["HTTP_BACKOFF_FACTOR"] = input("HTTP backoff factor (default: 0.5): ").strip() or "0.5"
    
    # Write .env file
    try:
        with open(env_file, 'w') as f:
            f.write("# UTA Environment Configuration\n")
            f.write("# Generated by setup_env.py\n\n")
            
            f.write("# OpenAI Configuration\n")
            for key, value in config.items():
                if key.startswith("OPENAI_"):
                    f.write(f"{key}={value}\n")
            
            f.write("\n# LLM Judge Configuration\n")
            for key, value in config.items():
                if key.startswith("LLM_JUDGE_"):
                    f.write(f"{key}={value}\n")
            
            f.write("\n# UTA Configuration\n")
            for key, value in config.items():
                if key.startswith("UTA_"):
                    f.write(f"{key}={value}\n")
            
            f.write("\n# HTTP Configuration\n")
            for key, value in config.items():
                if key.startswith("HTTP_"):
                    f.write(f"{key}={value}\n")
        
        print(f"\n‚úÖ .env file created successfully!")
        print(f"üìÅ Location: {env_file.absolute()}")
        
        # Test configuration
        print("\nüß™ Testing configuration...")
        test_configuration()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False

def test_configuration():
    """Test the configuration by loading it."""
    try:
        # Add current directory to path to import config modules
        sys.path.insert(0, str(Path(__file__).parent.parent))
        
        from config.env_loader import ConfigLoader
        
        config_loader = ConfigLoader()
        validation = config_loader.validate_config()
        
        print("Configuration validation results:")
        for service, is_valid in validation.items():
            status = "‚úÖ" if is_valid else "‚ùå"
            print(f"  {status} {service}: {'Valid' if is_valid else 'Invalid'}")
        
        if validation.get("openai", False):
            print("\nüöÄ Ready to test with ChatGPT!")
            print("Run: python3 -m runner.run --suite scenarios/advanced --report out_chatgpt --judge-mode llm")
        
        if validation.get("llm_judge", False):
            print("ü§ñ Ready to use LLM Judge!")
            print("Run: python3 -m runner.run --suite scenarios/advanced --report out_llm_judge --judge-mode llm")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Configuration test failed: {e}")
        print("You may need to install python-dotenv: pip install python-dotenv")

def show_usage():
    """Show usage instructions."""
    print("\nüìö Usage Instructions")
    print("=" * 50)
    print("1. Test with ChatGPT (using environment config):")
    print("   python3 -m runner.run --suite scenarios/advanced --report out_chatgpt --judge-mode llm")
    print()
    print("2. Test with LLM Judge:")
    print("   python3 -m runner.run --suite scenarios/advanced --report out_llm_judge --judge-mode llm")
    print()
    print("3. Test with hybrid judge:")
    print("   python3 -m runner.run --suite scenarios/advanced --report out_hybrid --judge-mode hybrid")
    print()
    print("4. Test specific scenarios:")
    print("   python3 -m runner.run --suite scenarios/advanced --report out_emotional --tags emotional --judge-mode llm")
    print()
    print("5. View results:")
    print("   open out_chatgpt/report.html")

def main():
    """Main setup function."""
    print("üéØ UTA Environment Setup")
    print("This script helps you configure UTA for testing with real LLM judges.")
    print()
    
    # Check if python-dotenv is available
    try:
        import dotenv
        print("‚úÖ python-dotenv is available")
    except ImportError:
        print("‚ö†Ô∏è python-dotenv not found. Install with: pip install python-dotenv")
        print("   This is recommended for .env file support.")
        print()
    
    # Create .env file
    if create_env_file():
        show_usage()
    else:
        print("‚ùå Setup failed. Please check your configuration and try again.")

if __name__ == "__main__":
    main()

